datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // other than nextauth

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // other than nextauth
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // other than nextauth
  password      String    @default("")
  role          role      @default(user)
  classes       Classes[]

  @@index([email])
}

enum role {
  admin
  user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id             String    @id @default(cuid())
  name           String    @default("")
  description    String    @default("")
  image_url      String    @default("")
  course_outline String    @default("")
  group_price    Int       @default(0)
  single_price   Int       @default(200)
  created_date   DateTime  @default(now())
  update_at      DateTime  @updatedAt
  tags           String[]
  Classes        Classes[]
  grade          Grades    @default(school_1)

  @@index([id])
}

enum Grades {
  school_1
  school_2
  school_3
  school_4
  school_5
  school_6
  high_school_1
  high_school_2
  high_school_3
  high_school_4
  high_school_5
  high_school_6
  university
}

model Classes {
  id               String    @unique @default(cuid())
  subject          Subject   @relation(fields: [subjectId], references: [id])
  notify           Boolean   @default(false)
  is_paid          Boolean   @default(false)
  payment_slip_url String?
  meeting_time     DateTime?
  meeting_link     String?
  User             User?     @relation(fields: [userId], references: [id])
  userId           String?
  subjectId        String

  @@id([id])
  @@index([id])
}
