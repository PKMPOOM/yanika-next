generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Classes {
  id               String    @id @unique @default(uuid())
  notify           Boolean   @default(false)
  is_paid          Boolean   @default(false)
  payment_slip_url String?
  meeting_time     DateTime?
  meeting_link     String?
  userId           String?
  subjectId        String
  Subject          Subject   @relation(fields: [subjectId], references: [id])
  user             User?     @relation(fields: [userId], references: [id])

  @@index([id])
}

model Day {
  id       Days       @id @unique @default(NA)
  name     Days       @default(NA)
  index    Int        @default(autoincrement())
  TimeSlot TimeSlot[]

  @@index([id])
}

model GoogleToken {
  access_token   String       @id
  refresh_token  String       @unique
  scope          String
  token_type     String
  id_token       String
  expire_at      DateTime     @default(now()) @db.Timestamp(6)
  email          String       @default("")
  integrationsId String       @unique
  Integrations   Integrations @relation(fields: [integrationsId], references: [id])
}

model Integrations {
  id                    String       @id @default(uuid())
  GoogleCalendarConnect Boolean      @default(false)
  GoogleToken           GoogleToken?
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subject {
  id             String     @id @default(uuid())
  name           String     @default("")
  description    String     @default("")
  image_url      String     @default("")
  course_outline String     @default("") @db.Text
  group_price    Int        @default(0)
  single_price   Int        @default(200)
  created_date   DateTime   @default(now())
  update_at      DateTime   @default(now()) @updatedAt
  tags           String[]
  grade          Grades     @default(school_1)
  userId         String?
  Classes        Classes[]
  user           User?      @relation(fields: [userId], references: [id])
  TimeSlot       TimeSlot[]

  @@index([id])
}

model TimeSlot {
  id                String      @unique @default(uuid())
  index             Int         @default(autoincrement())
  start_time        DateTime    @default(now())
  parsed_start_time String      @default("")
  duration          Float       @default(1.0)
  dayId             Days
  subjectId         String?
  userBooked        String[]
  accept            Boolean     @default(false)
  bookingType       BookingType @default(single)
  totalPrice        Int         @default(0)
  isScheduled       Boolean     @default(false)
  scheduleDateTime  DateTime?
  meetingLink       String?
  eventID           String?
  userId            String
  Day               Day         @relation(fields: [dayId], references: [id])
  Subject           Subject?    @relation(fields: [subjectId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
}

model User {
  id            String     @id
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String     @default("")
  role          role       @default(user)
  Account       Account[]
  Classes       Classes[]
  Session       Session[]
  Subject       Subject[]
  TimeSlot      TimeSlot[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BookingType {
  single
  group
}

enum Days {
  NA
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum Grades {
  school_1
  school_2
  school_3
  school_4
  school_5
  school_6
  high_school_1
  high_school_2
  high_school_3
  high_school_4
  high_school_5
  high_school_6
  university
}

enum TimeSlots {
  NA
  nine_ten
  ten_eleven
  eleven_twelve
  twelve_one
  one_two
  two_three
  three_four
  four_five
  five_six
}

enum role {
  admin
  user
}
