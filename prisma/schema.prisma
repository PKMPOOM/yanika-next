datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // other than nextauth

  @@unique([provider, providerAccountId])
}

model GoogleToken {
  access_token   String       @id @default(cuid())
  refresh_token  String       @unique
  scope          String
  token_type     String
  id_token       String
  expire_at      DateTime     @default(now()) @db.Timestamp()
  email          String       @default("")
  Integrations   Integrations @relation(fields: [integrationsId], references: [id])
  integrationsId String       @unique
}

model Integrations {
  id                    String       @id @default(uuid())
  GoogleToken           GoogleToken?
  GoogleCalendarConnect Boolean      @default(false)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // other than nextauth
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // other than nextauth
  password      String     @default("")
  role          role       @default(user)
  classes       Classes[]
  subject       Subject[]
  // TimeSlot      TimeSlot[]
  time_slot     TimeSlot[]

  @@index([email])
}

enum role {
  admin
  user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id             String     @id @default(cuid())
  name           String     @default("")
  description    String     @default("")
  image_url      String     @default("")
  course_outline String     @default("")
  group_price    Int        @default(0)
  single_price   Int        @default(200)
  created_date   DateTime   @default(now())
  update_at      DateTime   @updatedAt
  tags           String[]
  Classes        Classes[]
  grade          Grades     @default(school_1)
  User           User?      @relation(fields: [userId], references: [id])
  userId         String?
  time_slot      TimeSlot[]

  @@index([id])
}

enum Grades {
  school_1
  school_2
  school_3
  school_4
  school_5
  school_6
  high_school_1
  high_school_2
  high_school_3
  high_school_4
  high_school_5
  high_school_6
  university
}

model Classes {
  id               String    @unique @default(cuid())
  subject          Subject   @relation(fields: [subjectId], references: [id])
  notify           Boolean   @default(false)
  is_paid          Boolean   @default(false)
  payment_slip_url String?
  meeting_time     DateTime?
  meeting_link     String?
  User             User?     @relation(fields: [userId], references: [id])
  userId           String?
  subjectId        String

  @@id([id])
  @@index([id])
}

enum TimeSlots {
  NA
  nine_ten
  ten_eleven
  eleven_twelve
  twelve_one
  one_two
  two_three
  three_four
  four_five
  five_six
}

model Day {
  id        Days       @unique @default(NA)
  name      Days       @default(NA)
  index     Int        @default(autoincrement())
  time_slot TimeSlot[]

  @@id([id])
  @@index([id])
}

model TimeSlot {
  id                String      @unique @default(uuid())
  index             Int         @default(autoincrement())
  start_time        DateTime    @default(now())
  parsed_start_time String      @default("")
  duration          Float       @default(1.0)
  Day               Day         @relation(fields: [dayId], references: [id])
  dayId             Days
  subject           Subject?    @relation(fields: [subjectId], references: [id])
  subjectId         String?
  userBooked        String[]
  accept            Boolean     @default(false)
  bookingType       BookingType @default(single)
  totalPrice        Int         @default(0)
  // schedule part
  isScheduled       Boolean     @default(false)
  scheduleDateTime  DateTime?
  meetingLink       String?
  eventID           String?
  user              User        @relation(fields: [userId], references: [id])
  userId            String
}

enum BookingType {
  single
  group
}

enum Days {
  NA
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}
